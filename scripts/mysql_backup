#!/bin/bash
#
# mysql_backup: Crea una copia de resgurdo diaria de las bases de datos.
#
# Author:
#   César Kästli <cesarkastli@gmail.com> (04-Jun-2010)
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2, or (at your option)
#   any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
# 
# Instalación:
#   $ chmod +x /path/to/mysql_backup
#   $ sudo ln -s /path/to/mysql_backup /usr/bin/mysql_backup
#
# Uso:
#   $ mysql_backup [-hf] [-t days] [-d destination] [-u username] [-p password] databases
#
# Para hacer copia de todas las bases de datos.
#   $ mysql_backup -d /path/to/backups %
#
# El script solo hace una copia por día, usar -f para ignorar esto.
#   $ mysql_backup -f -d /path/to/backups %
#
# Es posible seleccionar las bases a resguardar.
#   $ mysql_backup -d /path/to/backups db_1 db_2 db_N
#
# Puede correr como tarea de cron.
#   $ crontab -e
#   0 3 * * * mysql_backup -d /path/to/databases %
#

# Directorio destino de los archivos
BACKUP_DEST=/tmp

# Cantidad de días que se guardan los archivos
BACKUP_DAYS=7

# Extensión de los archivos
BACKUP_EXT=sql.gz

# Usuario de la base de datos
DB_USER=root

# Contraseña de la base de datos
DB_PASS=

# Bases de datos a resguardar
DATABASES=

# Ignora el semáforo si está presente
FORCED=0

# Se obtienen las opciones del usuario
while getopts "hft:d:u:p:" OPTION; do
  case $OPTION in
    h) printf "Usage: %s [-hf] [-t days] [-d destination] [-u username] [-p password] databases\n" $(basename $0); exit 0;;
    f) FORCED=1;;
    t) BACKUP_DAYS="$OPTARG";;
    d) BACKUP_DEST="$OPTARG";;
    u) DB_USER="$OPTARG";;
    p) DB_PASS="$OPTARG";;
    ?) printf "Try \`%s -h\` for more information.\n" $(basename $0) >&2; exit 1;;
  esac
done

# Se obtienen los argumentos restantes
shift $(($OPTIND - 1))

# Se buscan las bases a resguardar
for DB_NAME in $*; do
  DATABASES+=$(mysql --user=$DB_USER --password=$DB_PASS -e "SHOW DATABASES LIKE '$DB_NAME'" | awk ' (NR > 1) && ( $1 !~ /^(mysql|information_schema|test)$/) { print $1 " " }')
done

# Se verifica que existan bases a resguardar
if [ -z "$DATABASES" ]; then
  echo "No database to backup has defined" >&2
  exit 2
fi

# Se verifica que la cantidad de días sea numérico y mayor a 0
if [[ ! $BACKUP_DAYS =~ ^[0-9]+$ ]] || [ $BACKUP_DAYS -lt 1 ]; then
  echo "Backup days must be a numeric positive and greater than zero" >&2
  exit 3
fi

# Remove all trailing slashes
BACKUP_DEST=$(echo $BACKUP_DEST | sed 's/\/*$//')

# Se verifica que existe el directorio y se puede escribir
if [ -d "$BACKUP_DEST" ]; then
  if [ ! -w "$BACKUP_DEST" ]; then
    echo "Can not write to '$BACKUP_DEST' directory" >&2
    exit 4
  fi
else
  mkdir -p "$BACKUP_DEST" > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "Can not create the '$BACKUP_DEST' directory" >&2
    exit 5
  fi
fi

# Solo permite ejecutar el script una vez al día
find $BACKUP_DEST/.semaphore -mtime 0 > /dev/null 2>&1

# Si el semáforo es del dia termina el script
if [ $? -eq 0 ] && [ $FORCED -eq 0 ]; then
  echo "The backup process has already run today" >&2
  exit 6
fi

# Se libera espacio borrando backups viejos
find "$BACKUP_DEST" -maxdepth 1 -path "*.$BACKUP_EXT" -type f -mtime $BACKUP_DAYS -delete

# Se crea un backup comprimido por cada base
for DB_NAME in $DATABASES; do
  FILENAME=$DB_NAME-$(date +%Y-%m-%d).$BACKUP_EXT
  mysqldump --user=$DB_USER --password=$DB_PASS $DB_NAME | gzip > "$BACKUP_DEST/$FILENAME"
done

# Se deja registrado la última ejecución
touch $BACKUP_DEST/.semaphore